# 2日目: 記述統計と基本グラフ {.unnumbered}

データの山をただ眺めていても，なかなかその中から変数の特徴をつかむことは難しいです。
そこで本章では，データを代表する値(代表値)として，平均や分散，標準偏差，中央値などを計算し，データの特徴をつかむことから始めます。

## 読み込みと記述統計

まずはcsvファイルを読み込みます。
csvファイルの読み込みは，基本関数`read.csv()`を用います。

```{r chap2_csv}
df <- read.csv("data/chap2.csv", header = TRUE)
```

ある条件を満たす**行**を抽出したい場合は，`subset()`を用いいます。
`subset()`関数は`subset(データ, 条件式)`のように書くことで，条件を満たす行をデータから抽出できます。
ここでは、基本関数`subset()`を用いてB国(nationが2)のデータを取り出してみましょう。

```{r subset}
df_B <- subset(df, nation==2)
```

つぎに，`as.factor()`を使い，カテゴリー変数`gender`を因子型に変換します。

```{r chap2_factor}
df_B$gender <- as.factor(df_B$gender)
```

B国のデータだけを取り出せたので，B国の所得と性別の記述統計量を求めてみましょう。

```{r}
summary(df_B[,c(1,3)]) # 1列目と3列目の変数だけ
```

## グラフ

次に、B国の収入の分布を知るために，ヒストグラム(histogram)を作成してみます。
基本関数`hist()`は引数に1次元の数値ベクトルをとり，ヒストグラムを作成します。

:::{.aside}
ヒストグラムは`hist()`
:::

```{r chap2_hist}
par(family = "HiraKakuProN-W3") # mac文字化け対策
hist(df_B$income, xlab="収入", ylab="度数")
```

性別の度数分布を表す棒グラフを、基本関数`barplot()`を用いて作成します。

:::{.aside}
ヒストグラムは`barplot()`
:::

```{r chap2_barplot}
plot(
  df_B$gender, # 性別のベクトル 
  xlab="性別", ylab="度数", # x軸とy軸のラベル
  names.arg = c("男性","女性") # x軸のラベル
  )
```

次に、男女別の所得分布を表す**箱ひげ図**(box plot)を作成します。
箱ひげ図は、データの分布を視覚的に表現するためのグラフで、中央値や四分位数、外れ値などを示します。
箱ひげ図は基本関数`boxplot()`を用いて作成します。

:::{.aside}
箱ひげ図は`boxplot()`
:::

```{r chap2_boxplot}
par(family = "HiraKakuProN-W3") # mac文字化け対策
boxplot(
  df_B$income ~ df_B$gender, # 性別ごとの所得の分布
  xlab="性別", ylab="所得", 
  names.arg = c("男性","女性")
  )
```

## tidyverseで再実行

ここまで基本関数を用いて、データの読み込みや、データの抽出・加工、グラフの作成をしてきましたが、以下では、よりモダンな記述方法である`tidyverse`を用いて同じことを行います。
`tidyverse`はデータの整形や可視化を行うためのパッケージ群で、データ分析を行う上で非常に便利です。

まずは`tidyverse`パッケージをインストールし、読み込みます。
ここでは、パッケージのインストールと読み込みを一度に実行してくれる`pacman`パッケージの`p_load()`関数を用いています。

```{r}
pacman::p_load(tidyverse)
```

`tidyverse`パッケージ群の1つである`readr`パッケージの`read_csv()`関数でcsvファイルを読み込みます。
`read_csv()`のオプション`col_types`を使うことで、各列の型を指定できます。
1行目は整数`i`，2と3行目はファクター`f`を指定して読み込みます。

```{r}
df <- read_csv(
  "data/chap2.csv",
  col_types = "iff"
  )
```

次に`dplyr`パッケージの`filter()`関数を用いてB国のデータを取り出しつつ，`select()`関数で必要な変数だけを選び，`summary()`で記述統計量を計算します。
このように複数の処理を順番に行う場合には、`|>`演算子を用いて、パイプラインを作成します。
`|>`演算子は、左側の結果を右側の関数の第1引数に渡すことができます。

```{r}
df |> 
  dplyr::filter(nation==2) |> 
  dplyr::select(-nation) |> 
  summary()
```

:::{.aside}
データ操作パッケージ`dplyr`の`filter()`関数でデータを抽出し，`filter()`関数で変数を選択する。
`- 変数`はその変数以外という意味
:::

`tidyverse`パッケージ群のなかの強力な作図パッケージ`ggplot2`を用いてB国の収入のヒストグラムを書いてみましょう。

```{r fig.height=6, fig.width=6}
df_BB <- df |>
  filter(nation == 2) |> # B国のデータだけを抽出 
  select(income,gender) # incomeとgenderの変数

ggplot(df_BB) + 
  aes(x = income) + # 所得をx軸に
  geom_histogram(
    binwidth = 5, 
    breaks = seq(485, 520, by=5), 
    colour="darkgreen", 
    fill="skyblue"
  ) + theme_bw()
```

性別の度数分布の棒グラフ

```{r fig.height=6, fig.width=6}
ggplot(data = df_BB) + 
  aes(gender) + 
  geom_bar(
    colour = "darkgreen", 
    fill = "skyblue") + 
  theme_bw()
```

男女別の所得分布を表す箱ひげ図

```{r fig.height=6, fig.width=6}
ggplot(df_BB) + 
  aes(y = income, x = gender) + 
  geom_boxplot(aes(fill = gender))
```

### 課題補足

- 絶対値を返す関数`abs()`
- 小数点以下を切り捨てる関数`floor()` か`trunc()`

:::{.aside}
小数点以下を切り捨てる`floor()`と`trunc()`は引数がマイナスのとき返す結果が異なるので要注意
:::

```{r}
# 正の値の時は問題ないが，
floor(3.14159)
trunc(3.14159)
# 負の値の時は結果が異なる。
floor(-3.14159)
trunc(-3.14159)
```

